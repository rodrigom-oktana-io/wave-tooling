{
  "label": "Service Backlog Analysis",
  "folder": {
    "id": "<folderId>"
  },
  "state": {
    "dataSourceLinks": [],
    "gridLayouts": [],
    "layouts": [
      {
        "device": "default",
        "pages": [
          {
            "rows": [
              "box_1 {colspan=4, rowspan=8, zIndex=-1, vpad=-4, hpad=-15} | row: {height=5}",
              "text_27 {colspan=4}",
              "headerFlash {colspan=4} | row: {height=8}",
              "| row : {height=5}",
              "timeselect_Time_Selection {colspan=4}",
              "list_filter_Support_level {colspan=2} | list_filter_product {colspan=2}",
              "| row : {height=10}",
              "box_purple {colspan=4, rowspan=10, zIndex=-1, vpad=-4, hpad=-15} | row: {height=5}",
              "| row : {height=15}",
              "text_30 {colspan=2} | text_14 {colspan=1} | number_compare_backlog_Last_Year {colspan=1}",
              "number_Open_Case_Count {colspan=2} | text_16 {colspan=1} | number_Compare_Backlog {colspan=1}",
              "| row : {height=10}",
              "headerFlash2 {colspan=4} | row: {height=5}",
              "| row : {height=10}",
              "text_8 {colspan=2} | text_11 {colspan=1} | number_compare_backlogDays_Last_Year {colspan=1}",
              "number_days_to_close {colspan=2} | text_12 {colspan=1} | number_Compare_Backlog_in_Days {colspan=1}",
              "row : {height=15}",
              "text_18 {colspan=2} | list_Waterfall_Group_Select {colspan=2}",
              "Waterfall_Backlog_Chart {colspan=4} | row:{height=400}"
            ]
          },
          {
            "rows": [
              "box_1 {colspan=4, rowspan=3, zIndex=-1, vpad=-4, hpad=-15} | row: {height=10}",
              "text_27 {colspan=4}",
              "| row : {height=10}",
              "box_purple {colspan=4, rowspan=7, zIndex=-1, vpad=-4, hpad=-15} | row: {height=5}",
              "| row : {height=20}",
              "text_10 {colspan=2} | text_2 {colspan=1} | number_compare_created_Last_Year {colspan=1}",
              "number_new_case_count_this_week {colspan=2} | text_3 {colspan=1} | number_Compare_Case_Created {colspan=1}",
              "text_17 {colspan=2} | text_5 {colspan=1} | number_compare_closed_Last_Year {colspan=1}",
              "number_Closed_Case_Count_this_week {colspan=2} | text_7 {colspan=1} | number_Compare_Case_Closed {colspan=1}",
              "row : {height=10}",
              "row : {height=15}",
              "text_19 {colspan=4}",
              "time_Cases_Open_vs_Cases_Closed {colspan=4}",
              "row : {height=15}",
              "box_13 {colspan=4} | row: {height=5}",
              "row : {height=15}",
              "text_20 {colspan=4}",
              "time_Created_Cases_Over_Time {colspan=4}",
              "text_21 {colspan=4}",
              "time_Average_Duration_Over_Time {colspan=4}"
            ]
          },
          {
            "rows": [
              "box_1 {colspan=4, rowspan=3, zIndex=-1, vpad=-4, hpad=-15} | row: {height=10}",
              "text_27 {colspan=4}",
              "| row : {height=10}",
              "| row : {height=20}",
              "text_22 {colspan=2} | buttongroup_4 {colspan=2}",
              "time_Backlog_Trend_OverTime {colspan=4}",
              "text_25 {colspan=4}"
            ]
          }
        ],
        "version": 1
      }
    ],
    "steps": {
      "new_case_count_this_week": {
        "isFacet": true,
        "isGlobal": false,
        "selectMode": "single",
        "type": "aggregate",
        "useGlobal": true,
        "visualizationParameters": {
          "visualizationType": "hbar"
        },
        "query": {
          "query": "{\"measures\":[[\"count\",\"*\"]],\"filters\":[[\"CreatedDate__c\",[\"{{value(field(selection(Time_Selection), 'Compact'))}}\"]]]}",
          "version": -1
        },
        "datasets": [
          {
            "name": "<ServiceCase>"
          }
        ]
      },
      "compare_backlog_Last_Year": {
        "isFacet": true,
        "isGlobal": false,
        "selectMode": "single",
        "type": "aggregate",
        "useGlobal": true,
        "visualizationParameters": {
          "visualizationType": "hbar"
        },
        "query": {
          "query": "{\"measures\":[[\"unique\",\"Percent\"]],\"pigql\":\"q = load \\\"<ServiceCase>\\\";ENDTOTAL = filter q by 'IsClosed' == \\\"false\\\";updcreatedTOTAL = filter q by date('CreatedDate__c_Year','CreatedDate__c_Month','CreatedDate__c_Day') in [\\\"current day - 1 year\\\"..\\\"current day\\\"]; updclosedTOTAL = filter q by date('ClosedDate__c_Year','ClosedDate__c_Month','ClosedDate__c_Day') in [\\\"current day - 1 year\\\"..\\\"current day\\\"];compare = group updcreatedTOTAL by all full, updclosedTOTAL by all full, ENDTOTAL by all; compare = foreach compare generate (count(ENDTOTAL)-(count(ENDTOTAL)+count(updclosedTOTAL)-count(updcreatedTOTAL)))/(count(ENDTOTAL)+count(updclosedTOTAL)-count(updcreatedTOTAL)) *100  as 'unique_Percent';\",\"autoFilter\":true}",
          "version": -1
        },
        "datasets": [
          {
            "name": "<ServiceCase>"
          }
        ]
      },
      "Created_Cases_Over_Time": {
        "isFacet": true,
        "isGlobal": false,
        "selectMode": "none",
        "type": "aggregate",
        "useGlobal": true,
        "visualizationParameters": {
          "visualizationType": "time"
        },
        "query": {
          "query": "{\"measures\":[[\"count\",\"*\",null,{\"display\":\"Number of Cases\"}]],\"pigql\":\"q = load \\\"<ServiceCase>\\\"; ThisYear = filter q by date('CreatedDate__c_Year', 'CreatedDate__c_Month', 'CreatedDate__c_Day') in {{no_quote(value(field(selection(Time_Selection), 'Current')))}}; LastYear = filter q by date('CreatedDate__c_Year', 'CreatedDate__c_Month', 'CreatedDate__c_Day') in {{no_quote(value(field(selection(Time_Selection), 'LastYearCompare')))}};  LastYearGroup = cogroup ThisYear by {{no_quote(value(field(selection(Time_Selection), 'CoGroup')))}} left , LastYear by {{no_quote(value(field(selection(Time_Selection), 'CoGroup')))}};ThisYear = group ThisYear by {{no_quote(value(field(selection(Time_Selection), 'GroupbyCreatedDate__c')))}}; ThisYear = foreach ThisYear generate {{no_quote(value(field(selection(Time_Selection), 'GenerateCreatedDate__c')))}}, \\\"This Year\\\" as 'Date', count() as count;  LastYearGroup = foreach LastYearGroup generate {{no_quote(value(field(selection(Time_Selection), 'queryCogroupNew')))}}, \\\"Last Year\\\" as 'Date', count(LastYear) as count;c = union ThisYear,LastYearGroup;\",\"autoFilter\":true,\"groups\":[\"{{value(field(selection(Time_Selection), 'compactGroup'))}}\",\"Date\"]}",
          "version": -1
        },
        "datasets": [
          {
            "name": "<ServiceCase>"
          }
        ]
      },
      "compare_backlogDays_Last_Year": {
        "isFacet": true,
        "isGlobal": false,
        "selectMode": "single",
        "type": "aggregate",
        "useGlobal": true,
        "visualizationParameters": {
          "visualizationType": "hbar"
        },
        "query": {
          "query": "{\"measures\":[[\"unique\",\"Percent\"]],\"pigql\":\"q = load \\\"<ServiceCase>\\\"; totalBacklog = filter q by IsClosed == \\\"false\\\"; closedLast30Days = filter q by date('ClosedDate__c_Year','ClosedDate__c_Month','ClosedDate__c_Day') in [\\\"30 days ago\\\"..\\\"current day\\\"]; updcreatedTOTAL = filter q by date('CreatedDate__c_Year','CreatedDate__c_Month','CreatedDate__c_Day') in [\\\"current day - 1 year\\\"..\\\"current day\\\"];updclosedTOTAL = filter q by date('ClosedDate__c_Year','ClosedDate__c_Month','ClosedDate__c_Day') in [\\\"current day - 1 year\\\"..\\\"current day\\\"]; closedLast30DaysOldBacklog = filter q by date('ClosedDate__c_Year','ClosedDate__c_Month','ClosedDate__c_Day') in [\\\"current day - 395 days\\\"..\\\"current day - 365 days\\\"]; b = cogroup totalBacklog by all full, closedLast30Days by all full, updcreatedTOTAL by all full,updclosedTOTAL by all full, closedLast30DaysOldBacklog by all ; b = foreach b generate ((count(totalBacklog)/(count(closedLast30Days)/30))-((count(totalBacklog)+count(updclosedTOTAL)-count(updcreatedTOTAL))/(count(closedLast30DaysOldBacklog)/30)))/(((count(totalBacklog)+count(updclosedTOTAL)-count(updcreatedTOTAL)))/(count(closedLast30DaysOldBacklog)/30)) *100 as 'unique_Percent';\",\"autoFilter\":true}",
          "version": -1
        },
        "datasets": [
          {
            "name": "<ServiceCase>"
          }
        ]
      },
      "Backlog_Trend_Group_Select": {
        "isFacet": false,
        "isGlobal": false,
        "selectMode": "singlerequired",
        "start": "[[{\"ClosedField\":\"'ClosedDate__c_Week'\",\"CreatedField\":\"'CreatedDate__c_Week'\",\"FullGroup\":\"CreatedDate__c_Year~~~CreatedDate__c_Week\",\"Measure\":[\"Backlog\",\"Count\",null,{\"display\":\"Backlog Count at Start of Week\"}],\"compact\":[\"CreatedDate__c_Year\",\"CreatedDate__c_Week\"]}]]",
        "type": "static",
        "useGlobal": false,
        "values": [
          "{\"display\":\"Week\",\"value\":[{\"ClosedField\":\"'ClosedDate__c_Week'\",\"CreatedField\":\"'CreatedDate__c_Week'\",\"FullGroup\":\"CreatedDate__c_Year~~~CreatedDate__c_Week\",\"Measure\":[\"Backlog\",\"Count\",null,{\"display\":\"Backlog Count at Start of Week\"}],\"compact\":[\"CreatedDate__c_Year\",\"CreatedDate__c_Week\"]}]}",
          "{\"display\":\"Month\",\"value\":[{\"ClosedField\":\"'ClosedDate__c_Month'\",\"CreatedField\":\"'CreatedDate__c_Month'\",\"FullGroup\":\"CreatedDate__c_Year~~~CreatedDate__c_Month\",\"Measure\":[\"Backlog\",\"Count\",null,{\"display\":\"Backlog Count at Start of Month\"}],\"compact\":[\"CreatedDate__c_Year\",\"CreatedDate__c_Month\"]}]}"
        ]
      },
      "days_to_close": {
        "isFacet": true,
        "isGlobal": false,
        "selectMode": "single",
        "type": "aggregate",
        "useGlobal": true,
        "visualizationParameters": {
          "visualizationType": "hbar"
        },
        "query": {
          "query": "{\"measures\":[[\"tot\",\"backlogdays\"]],\"pigql\":\"q = load \\\"<ServiceCase>\\\";r = filter q by IsClosed == \\\"false\\\"; s = filter q by date('ClosedDate__c_Year','ClosedDate__c_Month','ClosedDate__c_Day') in [\\\"30 days ago\\\"..\\\"current day\\\"];b = cogroup r by all, s by all; b = foreach b generate count(r)/(count(s)/21) as 'tot_backlogdays';\",\"autoFilter\":true}",
          "version": -1
        },
        "datasets": [
          {
            "name": "<ServiceCase>"
          }
        ]
      },
      "Compare_Case_Closed": {
        "isFacet": true,
        "isGlobal": false,
        "selectMode": "single",
        "type": "aggregate",
        "useGlobal": true,
        "visualizationParameters": {
          "visualizationType": "hbar"
        },
        "query": {
          "query": "{\"measures\":[[\"unique\",\"Percent\"]],\"pigql\":\"q = load \\\"<ServiceCase>\\\"; curYear = filter q by date('ClosedDate__c_Year','ClosedDate__c_Month','ClosedDate__c_Day') in  {{no_quote(value(field(selection(Time_Selection), 'Current')))}}; comparePeriod = filter q by date('ClosedDate__c_Year','ClosedDate__c_Month','ClosedDate__c_Day') in {{no_quote(value(field(selection(Time_Selection), 'LastPeriodCompare')))}}; b = cogroup curYear by all, comparePeriod by all; b = foreach b generate (count(curYear) - count(comparePeriod))/count(comparePeriod) * 100 as unique_Percent; \",\"autoFilter\":true}",
          "version": -1
        },
        "datasets": [
          {
            "name": "<ServiceCase>"
          }
        ]
      },
      "Average_Duration_Over_Time": {
        "isFacet": true,
        "isGlobal": false,
        "selectMode": "none",
        "type": "aggregate",
        "useGlobal": true,
        "visualizationParameters": {
          "visualizationType": "time"
        },
        "query": {
          "query": "{\"measures\":\"{{(field(selection(Measure_Select), 'compact'))}}\",\"pigql\":\"q = load \\\"<ServiceCase>\\\";ThisYear = filter q by date('CreatedDate__c_Year', 'CreatedDate__c_Month', 'CreatedDate__c_Day') in {{no_quote(value(field(selection(Time_Selection), 'Current')))}}; LastYear = filter q by date('CreatedDate__c_Year', 'CreatedDate__c_Month', 'CreatedDate__c_Day') in {{no_quote(value(field(selection(Time_Selection), 'LastYearCompare')))}};  LastYearGroup = cogroup ThisYear by {{no_quote(value(field(selection(Time_Selection), 'CoGroup')))}} left , LastYear by {{no_quote(value(field(selection(Time_Selection), 'CoGroup')))}}; LastYearGroup = foreach LastYearGroup generate {{no_quote(value(field(selection(Time_Selection), 'queryCogroupNew')))}}, {{no_quote(value(field(selection(Measure_Select), 'SAQL')))}}; LastYearGroup = order LastYearGroup by {{single_quote(value(field(selection(Time_Selection), 'Grouping')))}}\",\"autoFilter\":true,\"groups\":[\"{{value(field(selection(Time_Selection), 'compactGroup'))}}\"]}",
          "version": -1
        },
        "datasets": [
          {
            "name": "<ServiceCase>"
          }
        ]
      },
      "waterfall_chart": {
        "isFacet": true,
        "isGlobal": false,
        "selectMode": "none",
        "type": "aggregate",
        "useGlobal": true,
        "visualizationParameters": {
          "visualizationType": "hbar"
        },
        "query": {
          "query": "{\"measures\":[[\"sum\",\"Backlog\"]],\"pigql\":\"q = load \\\"<ServiceCase>\\\";ENDTOTAL = filter q by 'IsClosed' == \\\"false\\\";END_FAKE = group q by {{single_quote(value(selection(Waterfall_Group_Select)))}}; END_FAKE = foreach END_FAKE generate  {{single_quote(value(selection(Waterfall_Group_Select)))}} as  {{single_quote(value(selection(Waterfall_Group_Select)))}},\\\"Current Backlog\\\" as 'Bucket', 0 as 'sum_Backlog'; END_REAL = group ENDTOTAL by {{single_quote(value(selection(Waterfall_Group_Select)))}};END_REAL = foreach END_REAL generate  {{single_quote(value(selection(Waterfall_Group_Select)))}} as  {{single_quote(value(selection(Waterfall_Group_Select)))}}, \\\"Current Backlog\\\" as 'Bucket', count() as 'sum_Backlog'; END = union END_FAKE,END_REAL; upcreatedTotal = filter q by date('CreatedDate__c_Year','CreatedDate__c_Month','CreatedDate__c_Day') in {{no_quote(value(field(selection(Time_Selection), 'BacklogCompare')))}}; upcreated = group upcreatedTotal by  {{single_quote(value(selection(Waterfall_Group_Select)))}}; upcreated = foreach upcreated generate   {{single_quote(value(selection(Waterfall_Group_Select)))}} as  {{single_quote(value(selection(Waterfall_Group_Select)))}}, \\\"Cases Created\\\" as 'Bucket', count() as 'sum_Backlog';dnclosedTotal = filter q by date('ClosedDate__c_Year','ClosedDate__c_Month','ClosedDate__c_Day') in {{no_quote(value(field(selection(Time_Selection), 'BacklogCompare')))}};dnclosed = group dnclosedTotal by  {{single_quote(value(selection(Waterfall_Group_Select)))}} ;dnclosed = foreach dnclosed generate {{single_quote(value(selection(Waterfall_Group_Select)))}} as  {{single_quote(value(selection(Waterfall_Group_Select)))}}, \\\"Cases Closed\\\" as 'Bucket', -count() as 'sum_Backlog';START = group upcreatedTotal by all full, dnclosedTotal by all full, ENDTOTAL by all;START = foreach START generate \\\"All\\\" as  {{single_quote(value(selection(Waterfall_Group_Select)))}}, {{(value(field(selection(Time_Selection), 'BacklogLabel')))}} as 'Bucket', count(ENDTOTAL)+count(dnclosedTotal)-count(upcreatedTotal) as 'sum_Backlog';WATERFALL = union START, upcreated,dnclosed, END;\",\"autoFilter\":true,\"groups\":[\"Bucket\",\" {{(value(selection(Waterfall_Group_Select)))}}\"]}",
          "version": -1
        },
        "datasets": [
          {
            "name": "<ServiceCase>"
          }
        ]
      },
      "Measure_Select": {
        "isFacet": false,
        "isGlobal": false,
        "selectMode": "singlerequired",
        "start": "[[{\"SAQL\":\"coalesce((count(ThisYear)-count(LastYear))/count(LastYear),1)*100 as sum_Percent\",\"compact\":[\"sum\",\"Percent\",null,{\"display\":\"% Change in Volume Y/Y\"}]}]]",
        "type": "static",
        "useGlobal": false,
        "values": [
          "{\"display\":\"Avg Duration\",\"value\":[{\"SAQL\":\"coalesce((avg(ThisYear['Duration__c'])-avg(LastYear['Duration__c']))/avg(LastYear['Duration__c']),1)*100 as sum_Percent\",\"compact\":[\"sum\",\"Percent\",null,{\"display\":\"% Change in Avg Duration Y/Y\"}]}]}",
          "{\"display\":\"Volume\",\"value\":[{\"SAQL\":\"coalesce((count(ThisYear)-count(LastYear))/count(LastYear),1)*100 as sum_Percent\",\"compact\":[\"sum\",\"Percent\",null,{\"display\":\"% Change in Volume Y/Y\"}]}]}"
        ]
      },
      "filter_type": {
        "isFacet": true,
        "isGlobal": false,
        "selectMode": "multi",
        "start": "[]",
        "type": "aggregate",
        "useGlobal": true,
        "visualizationParameters": {
          "visualizationType": "hbar"
        },
        "query": {
          "query": "{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"Type\"]}",
          "version": -1
        },
        "datasets": [
          {
            "name": "<ServiceCase>"
          }
        ]
      },
      "Time_Selection": {
        "isFacet": false,
        "isGlobal": false,
        "selectMode": "singlerequired",
        "start": "[[{\"Backlog30DayClose\":\"[\\\"current day - 60 days\\\"..\\\"current day - 1 month\\\"]\",\"BacklogCompare\":\"[\\\"current day - 1 month\\\"..\\\"current day\\\"]\",\"BacklogLabel\":\"Backlog Last Month\",\"ClosedField\":\"'ClosedDate__c_Month','ClosedDate__c_Day'\",\"CoGroup\":\"('CreatedDate__c_Month','CreatedDate__c_Day')\",\"Compact\":[[\"month\",0],[\"month\",0]],\"CreatedField\":\"'CreatedDate__c_Month','CreatedDate__c_Day'\",\"CreatedProjection\":\"(case when count(created) >0 then created['CreatedDate__c_Year']+\\\"~~~\\\"+created['CreatedDate__c_Month']+\\\"~~~\\\"+created['CreatedDate__c_Day'] else  closed['ClosedDate__c_Year']+\\\"~~~\\\"+closed['ClosedDate__c_Month']+\\\"~~~\\\"+closed['ClosedDate__c_Day'] end)\",\"Current\":\"[\\\"current month\\\"..\\\"current month\\\"]\",\"FullGroup\":\"CreatedDate__c_Year~~~CreatedDate__c_Month~~~CreatedDate__c_Day\",\"GenerateClosedDate\":\"'ClosedDate__c_Year'+\\\"~~~\\\"+'ClosedDate__c_Month'+\\\"~~~\\\"+'ClosedDate__c_Day' as 'CreatedDate__c_Year~~~CreatedDate__c_Month~~~CreatedDate__c_Day'\",\"GenerateCoGroupDate\":\"created['CreatedDate__c_Year']+\\\"~~~\\\"+created['CreatedDate__c_Month']+\\\"~~~\\\"+created['CreatedDate__c_Day'] as 'CreatedDate__c_Year~~~CreatedDate__c_Month~~~CreatedDate__c_Day'\",\"GenerateCreatedDate__c\":\"'CreatedDate__c_Year'+\\\"~~~\\\"+'CreatedDate__c_Month'+\\\"~~~\\\"+'CreatedDate__c_Day' as 'CreatedDate__c_Year~~~CreatedDate__c_Month~~~CreatedDate__c_Day'\",\"GroupbyClosedDate\":\"('ClosedDate__c_Year','ClosedDate__c_Month','ClosedDate__c_Day')\",\"GroupbyCreatedDate__c\":\"('CreatedDate__c_Year','CreatedDate__c_Month','CreatedDate__c_Day')\",\"Grouping\":\"CreatedDate__c_Year~~~CreatedDate__c_Month~~~CreatedDate__c_Day\",\"LastPeriodCompare\":\"[\\\"current month - 1 month\\\"..\\\"current day - 1 month\\\"]\",\"LastYearCompare\":\"[\\\"current month - 1 year\\\"..\\\"current day - 1 year\\\"]\",\"Measure\":[\"Backlog\",\"Count\",null,{\"display\":\"Backlog Count at Start of Day\"}],\"compactGroup\":[\"CreatedDate__c_Year\",\"CreatedDate__c_Month\",\"CreatedDate__c_Day\"],\"filter\":\"month\",\"queryCogroupNew\":\"first(ThisYear['CreatedDate__c_Year'])+\\\"~~~\\\"+ThisYear['CreatedDate__c_Month']+\\\"~~~\\\"+ThisYear['CreatedDate__c_Day'] as 'CreatedDate__c_Year~~~CreatedDate__c_Month~~~CreatedDate__c_Day'\",\"trendProjection\":\"toString(now(), \\\"yyyy~~~MM\\\")+\\\"~~~\\\"+toString(now(), \\\"99\\\")\"}]]",
        "type": "static",
        "useGlobal": false,
        "values": [
          "{\"display\":\"YTD\",\"value\":[{\"Backlog30DayClose\":\"[\\\"current day - 395 days\\\"..\\\"current day - 1 year\\\"]\",\"BacklogCompare\":\"[\\\"current day - 1 year\\\"..\\\"current day\\\"]\",\"BacklogLabel\":\"Backlog Last Year\",\"ClosedField\":\"'ClosedDate__c_Month'\",\"CoGroup\":\"('CreatedDate__c_Month')\",\"Compact\":[[\"year\",0],[\"year\",0]],\"CreatedField\":\"'CreatedDate__c_Month'\",\"CreatedProjection\":\"(case when count(created) >0 then created['CreatedDate__c_Year']+\\\"~~~\\\"+created['CreatedDate__c_Month'] else  closed['ClosedDate__c_Year']+\\\"~~~\\\"+closed['ClosedDate__c_Month'] end)\",\"Current\":\"[\\\"current year\\\"..\\\"current day\\\"]\",\"FullGroup\":\"CreatedDate__c_Year~~~CreatedDate__c_Month\",\"GenerateClosedDate\":\"'ClosedDate__c_Year'+\\\"~~~\\\"+'ClosedDate__c_Month' as 'CreatedDate__c_Year~~~CreatedDate__c_Month'\",\"GenerateCoGroupDate\":\"created['CreatedDate__c_Year']+\\\"~~~\\\"+created['CreatedDate__c_Month'] as 'CreatedDate__c_Year~~~CreatedDate__c_Month'\",\"GenerateCreatedDate__c\":\"'CreatedDate__c_Year'+\\\"~~~\\\"+'CreatedDate__c_Month' as 'CreatedDate__c_Year~~~CreatedDate__c_Month'\",\"GroupbyClosedDate\":\"('ClosedDate__c_Year','ClosedDate__c_Month')\",\"GroupbyCreatedDate__c\":\"('CreatedDate__c_Year','CreatedDate__c_Month')\",\"Grouping\":\"CreatedDate__c_Year~~~CreatedDate__c_Month\",\"LastPeriodCompare\":\"[\\\"current year - 1 year\\\"..\\\"current day - 1 year\\\"]\",\"LastYearCompare\":\"[\\\"current year - 1 year\\\"..\\\"current day - 1 year\\\"]\",\"Measure\":[\"Backlog\",\"Count\",null,{\"display\":\"Backlog Count at Start of Month\"}],\"compactGroup\":[\"CreatedDate__c_Year\",\"CreatedDate__c_Month\"],\"filter\":\"year\",\"queryCogroupNew\":\"first(ThisYear['CreatedDate__c_Year'])+\\\"~~~\\\"+ThisYear['CreatedDate__c_Month'] as 'CreatedDate__c_Year~~~CreatedDate__c_Month'\",\"trendProjection\":\"toString(now(), \\\"yyyy\\\")+\\\"~~~\\\"+toString(now(), \\\"99\\\")\"}]}",
          "{\"display\":\"QTD\",\"value\":[{\"Backlog30DayClose\":\"[\\\"current day - 120 days\\\"..\\\"current day - 1 quarter\\\"]\",\"BacklogCompare\":\"[\\\"current day - 1 quarter\\\"..\\\"current day\\\"]\",\"BacklogLabel\":\"Backlog Last Quarter\",\"ClosedField\":\"'ClosedDate__c_Week'\",\"CoGroup\":\"('CreatedDate__c_Week')\",\"Compact\":[[\"quarter\",0],[\"quarter\",0]],\"CreatedField\":\"'CreatedDate__c_Week'\",\"CreatedProjection\":\"(case when count(created) >0 then created['CreatedDate__c_Year']+\\\"~~~\\\"+created['CreatedDate__c_Week'] else  closed['ClosedDate__c_Year']+\\\"~~~\\\"+closed['ClosedDate__c_Week'] end)\",\"Current\":\"[\\\"current quarter\\\"..\\\"current day\\\"]\",\"FullGroup\":\"CreatedDate__c_Year~~~CreatedDate__c_Week\",\"GenerateClosedDate\":\"'ClosedDate__c_Year'+\\\"~~~\\\"+'ClosedDate__c_Week' as 'CreatedDate__c_Year~~~CreatedDate__c_Week'\",\"GenerateCoGroupDate\":\"created['CreatedDate__c_Year']+\\\"~~~\\\"+created['CreatedDate__c_Week'] as 'CreatedDate__c_Year~~~CreatedDate__c_Week'\",\"GenerateCreatedDate__c\":\"'CreatedDate__c_Year'+\\\"~~~\\\"+'CreatedDate__c_Week' as 'CreatedDate__c_Year~~~CreatedDate__c_Week'\",\"GroupbyClosedDate\":\"('ClosedDate__c_Year','ClosedDate__c_Week')\",\"GroupbyCreatedDate__c\":\"('CreatedDate__c_Year','CreatedDate__c_Week')\",\"Grouping\":\"CreatedDate__c_Year~~~CreatedDate__c_Week\",\"LastPeriodCompare\":\"[\\\"current quarter - 1 quarter\\\"..\\\"current day - 1 quarter\\\"]\",\"LastYearCompare\":\"[\\\"current quarter - 1 year\\\"..\\\"current day - 1 year\\\"]\",\"Measure\":[\"Backlog\",\"Count\",null,{\"display\":\"Backlog Count at Start of Week\"}],\"compactGroup\":[\"CreatedDate__c_Year\",\"CreatedDate__c_Week\"],\"filter\":\"quarter\",\"queryCogroupNew\":\"first(ThisYear['CreatedDate__c_Year'])+\\\"~~~\\\"+ThisYear['CreatedDate__c_Week'] as 'CreatedDate__c_Year~~~CreatedDate__c_Week'\",\"trendProjection\":\"toString(now(), \\\"yyyy\\\")+\\\"~~~\\\"+toString(now(), \\\"99\\\")\"}]}",
          "{\"display\":\"MTD\",\"value\":[{\"Backlog30DayClose\":\"[\\\"current day - 60 days\\\"..\\\"current day - 1 month\\\"]\",\"BacklogCompare\":\"[\\\"current day - 1 month\\\"..\\\"current day\\\"]\",\"BacklogLabel\":\"Backlog Last Month\",\"ClosedField\":\"'ClosedDate__c_Month','ClosedDate__c_Day'\",\"CoGroup\":\"('CreatedDate__c_Month','CreatedDate__c_Day')\",\"Compact\":[[\"month\",0],[\"month\",0]],\"CreatedField\":\"'CreatedDate__c_Month','CreatedDate__c_Day'\",\"CreatedProjection\":\"(case when count(created) >0 then created['CreatedDate__c_Year']+\\\"~~~\\\"+created['CreatedDate__c_Month']+\\\"~~~\\\"+created['CreatedDate__c_Day'] else  closed['ClosedDate__c_Year']+\\\"~~~\\\"+closed['ClosedDate__c_Month']+\\\"~~~\\\"+closed['ClosedDate__c_Day'] end)\",\"Current\":\"[\\\"current month\\\"..\\\"current month\\\"]\",\"FullGroup\":\"CreatedDate__c_Year~~~CreatedDate__c_Month~~~CreatedDate__c_Day\",\"GenerateClosedDate\":\"'ClosedDate__c_Year'+\\\"~~~\\\"+'ClosedDate__c_Month'+\\\"~~~\\\"+'ClosedDate__c_Day' as 'CreatedDate__c_Year~~~CreatedDate__c_Month~~~CreatedDate__c_Day'\",\"GenerateCoGroupDate\":\"created['CreatedDate__c_Year']+\\\"~~~\\\"+created['CreatedDate__c_Month']+\\\"~~~\\\"+created['CreatedDate__c_Day'] as 'CreatedDate__c_Year~~~CreatedDate__c_Month~~~CreatedDate__c_Day'\",\"GenerateCreatedDate__c\":\"'CreatedDate__c_Year'+\\\"~~~\\\"+'CreatedDate__c_Month'+\\\"~~~\\\"+'CreatedDate__c_Day' as 'CreatedDate__c_Year~~~CreatedDate__c_Month~~~CreatedDate__c_Day'\",\"GroupbyClosedDate\":\"('ClosedDate__c_Year','ClosedDate__c_Month','ClosedDate__c_Day')\",\"GroupbyCreatedDate__c\":\"('CreatedDate__c_Year','CreatedDate__c_Month','CreatedDate__c_Day')\",\"Grouping\":\"CreatedDate__c_Year~~~CreatedDate__c_Month~~~CreatedDate__c_Day\",\"LastPeriodCompare\":\"[\\\"current month - 1 month\\\"..\\\"current day - 1 month\\\"]\",\"LastYearCompare\":\"[\\\"current month - 1 year\\\"..\\\"current day - 1 year\\\"]\",\"Measure\":[\"Backlog\",\"Count\",null,{\"display\":\"Backlog Count at Start of Day\"}],\"compactGroup\":[\"CreatedDate__c_Year\",\"CreatedDate__c_Month\",\"CreatedDate__c_Day\"],\"filter\":\"month\",\"queryCogroupNew\":\"first(ThisYear['CreatedDate__c_Year'])+\\\"~~~\\\"+ThisYear['CreatedDate__c_Month']+\\\"~~~\\\"+ThisYear['CreatedDate__c_Day'] as 'CreatedDate__c_Year~~~CreatedDate__c_Month~~~CreatedDate__c_Day'\",\"trendProjection\":\"toString(now(), \\\"yyyy~~~MM\\\")+\\\"~~~\\\"+toString(now(), \\\"99\\\")\"}]}",
          "{\"display\":\"Last 7 Days\",\"value\":[{\"Backlog30DayClose\":\"[\\\"current day - 37 days\\\"..\\\"current day - 7 days\\\"]\",\"BacklogCompare\":\"[\\\"current day - 1 week\\\"..\\\"current day\\\"]\",\"BacklogLabel\":\"Backlog Last 7 Days\",\"ClosedField\":\"'ClosedDate__c_Month','ClosedDate__c_Day'\",\"CoGroup\":\"('CreatedDate__c_Month','CreatedDate__c_Day')\",\"Compact\":[[\"day\",-7],[\"day\",0]],\"CreatedField\":\"'CreatedDate__c_Month','CreatedDate__c_Day'\",\"CreatedProjection\":\"(case when count(created) >0 then created['CreatedDate__c_Year']+\\\"~~~\\\"+created['CreatedDate__c_Month']+\\\"~~~\\\"+created['CreatedDate__c_Day'] else  closed['ClosedDate__c_Year']+\\\"~~~\\\"+closed['ClosedDate__c_Month']+\\\"~~~\\\"+closed['ClosedDate__c_Day'] end)\",\"Current\":\"[\\\"7 days ago\\\"..\\\"current day\\\"]\",\"FullGroup\":\"CreatedDate__c_Year~~~CreatedDate__c_Month~~~CreatedDate__c_Day\",\"GenerateClosedDate\":\"'ClosedDate__c_Year'+\\\"~~~\\\"+'ClosedDate__c_Month'+\\\"~~~\\\"+'ClosedDate__c_Day' as 'CreatedDate__c_Year~~~CreatedDate__c_Month~~~CreatedDate__c_Day'\",\"GenerateCoGroupDate\":\"created['CreatedDate__c_Year']+\\\"~~~\\\"+created['CreatedDate__c_Month']+\\\"~~~\\\"+created['CreatedDate__c_Day'] as 'CreatedDate__c_Year~~~CreatedDate__c_Month~~~CreatedDate__c_Day'\",\"GenerateCreatedDate__c\":\"'CreatedDate__c_Year'+\\\"~~~\\\"+'CreatedDate__c_Month'+\\\"~~~\\\"+'CreatedDate__c_Day' as 'CreatedDate__c_Year~~~CreatedDate__c_Month~~~CreatedDate__c_Day'\",\"GroupbyClosedDate\":\"('ClosedDate__c_Year','ClosedDate__c_Month','ClosedDate__c_Day')\",\"GroupbyCreatedDate__c\":\"('CreatedDate__c_Year','CreatedDate__c_Month','CreatedDate__c_Day')\",\"Grouping\":\"CreatedDate__c_Year~~~CreatedDate__c_Month~~~CreatedDate__c_Day\",\"LastPeriodCompare\":\"[\\\"7 days ago - 1 week\\\"..\\\"current day - 1 week\\\"]\",\"LastYearCompare\":\"[\\\"7 days ago - 1 year\\\"..\\\"current day - 1 year\\\"]\",\"Measure\":[\"Backlog\",\"Count\",null,{\"display\":\"Backlog Count at Start of Day\"}],\"compactGroup\":[\"CreatedDate__c_Year\",\"CreatedDate__c_Month\",\"CreatedDate__c_Day\"],\"filter\":\"week\",\"queryCogroupNew\":\"first(ThisYear['CreatedDate__c_Year'])+\\\"~~~\\\"+ThisYear['CreatedDate__c_Month']+\\\"~~~\\\"+ThisYear['CreatedDate__c_Day'] as 'CreatedDate__c_Year~~~CreatedDate__c_Month~~~CreatedDate__c_Day'\",\"trendProjection\":\"toString(now(), \\\"yyyy~~~MM\\\")+\\\"~~~\\\"+toString(now(), \\\"99\\\")\"}]}",
          "{\"display\":\"Last 30 Days\",\"value\":[{\"Backlog30DayClose\":\"[\\\"current day - 60 days\\\"..\\\"current day - 30 days\\\"]\",\"BacklogCompare\":\"[\\\"current day - 30 days\\\"..\\\"current day\\\"]\",\"BacklogLabel\":\"Backlog Last 30 Days\",\"ClosedField\":\"'ClosedDate__c_Week'\",\"CoGroup\":\"('CreatedDate__c_Week')\",\"Compact\":[[\"day\",-30],[\"day\",0]],\"CreatedField\":\"'CreatedDate__c_Week'\",\"CreatedProjection\":\"(case when count(created) >0 then created['CreatedDate__c_Year']+\\\"~~~\\\"+created['CreatedDate__c_Week'] else  closed['ClosedDate__c_Year']+\\\"~~~\\\"+closed['ClosedDate__c_Week'] end)\",\"Current\":\"[\\\"30 days ago\\\"..\\\"current day\\\"]\",\"FullGroup\":\"CreatedDate__c_Year~~~CreatedDate__c_Week\",\"GenerateClosedDate\":\"'ClosedDate__c_Year'+\\\"~~~\\\"+'ClosedDate__c_Week' as 'CreatedDate__c_Year~~~CreatedDate__c_Week'\",\"GenerateCoGroupDate\":\"created['CreatedDate__c_Year']+\\\"~~~\\\"+created['CreatedDate__c_Week'] as 'CreatedDate__c_Year~~~CreatedDate__c_Week'\",\"GenerateCreatedDate__c\":\"'CreatedDate__c_Year'+\\\"~~~\\\"+'CreatedDate__c_Week' as 'CreatedDate__c_Year~~~CreatedDate__c_Week'\",\"GroupbyClosedDate\":\"('ClosedDate__c_Year','ClosedDate__c_Week')\",\"GroupbyCreatedDate__c\":\"('CreatedDate__c_Year','CreatedDate__c_Week')\",\"Grouping\":\"CreatedDate__c_Year~~~CreatedDate__c_Week\",\"LastPeriodCompare\":\"[\\\"30 days ago - 30 days\\\"..\\\"current day - 30 days\\\"]\",\"LastYearCompare\":\"[\\\"30 days ago - 1 year\\\"..\\\"current day - 1 year\\\"]\",\"Measure\":[\"Backlog\",\"Count\",null,{\"display\":\"Backlog Count at Start of Week\"}],\"compactGroup\":[\"CreatedDate__c_Year\",\"CreatedDate__c_Week\"],\"filter\":\"month\",\"queryCogroupNew\":\"first(ThisYear['CreatedDate__c_Year'])+\\\"~~~\\\"+ThisYear['CreatedDate__c_Week'] as 'CreatedDate__c_Year~~~CreatedDate__c_Week'\",\"trendProjection\":\"toString(now(), \\\"yyyy\\\")+\\\"~~~\\\"+toString(now(), \\\"99\\\")\"}]}",
          "{\"display\":\"Last 180 Days\",\"value\":[{\"Backlog30DayClose\":\"[\\\"current day - 240 days\\\"..\\\"current day - 180 days\\\"]\",\"BacklogCompare\":\"[\\\"current day - 180 days\\\"..\\\"current day\\\"]\",\"BacklogLabel\":\"Backlog Last 180 Days\",\"ClosedField\":\"'ClosedDate__c_Month'\",\"CoGroup\":\"('CreatedDate__c_Month')\",\"Compact\":[[\"day\",-180],[\"day\",0]],\"CreatedField\":\"'CreatedDate__c_Month'\",\"CreatedProjection\":\"(case when count(created) >0 then created['CreatedDate__c_Year']+\\\"~~~\\\"+created['CreatedDate__c_Month'] else  closed['ClosedDate__c_Year']+\\\"~~~\\\"+closed['ClosedDate__c_Month'] end)\",\"Current\":\"[\\\"180 days ago\\\"..\\\"current day\\\"]\",\"FullGroup\":\"CreatedDate__c_Year~~~CreatedDate__c_Month\",\"GenerateClosedDate\":\"'ClosedDate__c_Year'+\\\"~~~\\\"+'ClosedDate__c_Month' as 'CreatedDate__c_Year~~~CreatedDate__c_Month'\",\"GenerateCoGroupDate\":\"created['CreatedDate__c_Year']+\\\"~~~\\\"+created['CreatedDate__c_Month'] as 'CreatedDate__c_Year~~~CreatedDate__c_Month'\",\"GenerateCreatedDate__c\":\"'CreatedDate__c_Year'+\\\"~~~\\\"+'CreatedDate__c_Month' as 'CreatedDate__c_Year~~~CreatedDate__c_Month'\",\"GroupbyClosedDate\":\"('ClosedDate__c_Year','ClosedDate__c_Month')\",\"GroupbyCreatedDate__c\":\"('CreatedDate__c_Year','CreatedDate__c_Month')\",\"Grouping\":\"CreatedDate__c_Year~~~CreatedDate__c_Month\",\"LastPeriodCompare\":\"[\\\"180 days ago - 180 days\\\"..\\\"current day - 180 days\\\"]\",\"LastYearCompare\":\"[\\\"180 days ago - 1 year\\\"..\\\"current day - 1 year\\\"]\",\"Measure\":[\"Backlog\",\"Count\",null,{\"display\":\"Backlog Count at Start of Month\"}],\"compactGroup\":[\"CreatedDate__c_Year\",\"CreatedDate__c_Month\"],\"filter\":\"month\",\"queryCogroupNew\":\"first(ThisYear['CreatedDate__c_Year'])+\\\"~~~\\\"+ThisYear['CreatedDate__c_Month'] as 'CreatedDate__c_Year~~~CreatedDate__c_Month'\",\"trendProjection\":\"toString(now(), \\\"yyyy\\\")+\\\"~~~\\\"+toString(now(), \\\"99\\\")\"}]}"
        ]
      },
      "filter_product": {
        "isFacet": true,
        "isGlobal": false,
        "selectMode": "multi",
        "start": "[]",
        "type": "aggregate",
        "useGlobal": true,
        "visualizationParameters": {
          "visualizationType": "hbar"
        },
        "query": {
          "query": "{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"Product_Name__c\"]}",
          "version": -1
        },
        "datasets": [
          {
            "name": "<ServiceCase>"
          }
        ]
      },
      "compare_closed_Last_Year": {
        "isFacet": true,
        "isGlobal": false,
        "selectMode": "single",
        "type": "aggregate",
        "useGlobal": true,
        "visualizationParameters": {
          "visualizationType": "hbar"
        },
        "query": {
          "query": "{\"measures\":[[\"unique\",\"Percent\"]],\"pigql\":\"q = load \\\"<ServiceCase>\\\"; curYear = filter q by date('ClosedDate__c_Year','ClosedDate__c_Month','ClosedDate__c_Day') in  {{no_quote(value(field(selection(Time_Selection), 'Current')))}}; comparePeriod = filter q by date('ClosedDate__c_Year','ClosedDate__c_Month','ClosedDate__c_Day') in {{no_quote(value(field(selection(Time_Selection), 'LastYearCompare')))}}; b = cogroup curYear by all, comparePeriod by all; b = foreach b generate (count(curYear) - count(comparePeriod))/count(comparePeriod) * 100 as unique_Percent; \",\"autoFilter\":true}",
          "version": -1
        },
        "datasets": [
          {
            "name": "<ServiceCase>"
          }
        ]
      },
      "Waterfall_Group_Select": {
        "isFacet": false,
        "isGlobal": false,
        "selectMode": "singlerequired",
        "start": "[[\"Type_of_Support__c\"]]",
        "type": "static",
        "useGlobal": false,
        "values": [
          "{\"display\":\"Type of Support\",\"value\":[\"Type_of_Support__c\"]}",
          "{\"display\":\"Product Name\",\"value\":[\"Product_Name__c\"]}",
          "{\"display\":\"Case Type\",\"value\":[\"Type\"]}",
          "{\"display\":\"Case Origin\",\"value\":[\"Origin\"]}"
        ]
      },
      "compare_created_Last_Year": {
        "isFacet": true,
        "isGlobal": false,
        "selectMode": "single",
        "type": "aggregate",
        "useGlobal": true,
        "visualizationParameters": {
          "visualizationType": "hbar"
        },
        "query": {
          "query": "{\"measures\":[[\"unique\",\"unique_Percent\"]],\"pigql\":\"q = load \\\"<ServiceCase>\\\"; curYear = filter q by date('CreatedDate__c_Year','CreatedDate__c_Month','CreatedDate__c_Day') in  {{no_quote(value(field(selection(Time_Selection), 'Current')))}}; comparePeriod = filter q by date('CreatedDate__c_Year','CreatedDate__c_Month','CreatedDate__c_Day') in {{no_quote(value(field(selection(Time_Selection), 'LastYearCompare')))}};  b = cogroup curYear by all, comparePeriod by all; b = foreach b generate (count(curYear) - count(comparePeriod))/count(comparePeriod) *100 as unique_Percent; \",\"autoFilter\":true}",
          "version": -1
        },
        "datasets": [
          {
            "name": "<ServiceCase>"
          }
        ]
      },
      "filter_Support_level": {
        "isFacet": true,
        "isGlobal": false,
        "selectMode": "multi",
        "type": "aggregate",
        "useGlobal": true,
        "visualizationParameters": {
          "visualizationType": "hbar"
        },
        "query": {
          "query": "{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"Type_of_Support__c\"]}",
          "version": -1
        },
        "datasets": [
          {
            "name": "<ServiceCase>"
          }
        ]
      },
      "Compare_Backlog": {
        "isFacet": true,
        "isGlobal": false,
        "selectMode": "single",
        "type": "aggregate",
        "useGlobal": true,
        "visualizationParameters": {
          "visualizationType": "hbar"
        },
        "query": {
          "query": "{\"measures\":[[\"unique\",\"Percent\"]],\"pigql\":\"q = load \\\"<ServiceCase>\\\";ENDTOTAL = filter q by 'IsClosed' == \\\"false\\\";updcreatedTOTAL = filter q by date('CreatedDate__c_Year','CreatedDate__c_Month','CreatedDate__c_Day') in {{no_quote(value(field(selection(Time_Selection), 'BacklogCompare')))}};updclosedTOTAL = filter q by date('ClosedDate__c_Year','ClosedDate__c_Month','ClosedDate__c_Day') in {{no_quote(value(field(selection(Time_Selection), 'BacklogCompare')))}};compare = group updcreatedTOTAL by all full, updclosedTOTAL by all full, ENDTOTAL by all; compare = foreach compare generate (count(ENDTOTAL)-(count(ENDTOTAL)+count(updclosedTOTAL)-count(updcreatedTOTAL)))/(count(ENDTOTAL)+count(updclosedTOTAL)-count(updcreatedTOTAL)) *100 as 'unique_Percent';\",\"autoFilter\":true}",
          "version": -1
        },
        "datasets": [
          {
            "name": "<ServiceCase>"
          }
        ]
      },
      "filter_recordtype": {
        "isFacet": true,
        "isGlobal": false,
        "selectMode": "multi",
        "start": "[]",
        "type": "aggregate",
        "useGlobal": true,
        "visualizationParameters": {
          "visualizationType": "hbar"
        },
        "query": {
          "query": "{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"RecordType.Name\"]}",
          "version": -1
        },
        "datasets": [
          {
            "name": "<ServiceCase>"
          }
        ]
      },
      "Show_Close_Open_Details": {
        "isFacet": false,
        "isGlobal": false,
        "selectMode": "singlerequired",
        "start": "[[\"Closed\",\"Created\"]]",
        "type": "static",
        "useGlobal": false,
        "values": [
          "{\"display\":\"Cases\",\"value\":[\"Closed\",\"Created\"]}",
          "{\"display\":\"Change\",\"value\":\"Backlog Impact\"}"
        ]
      },
      "Compare_Case_Created": {
        "isFacet": true,
        "isGlobal": false,
        "selectMode": "single",
        "type": "aggregate",
        "useGlobal": true,
        "visualizationParameters": {
          "visualizationType": "hbar"
        },
        "query": {
          "query": "{\"measures\":[[\"unique\",\"unique_Percent\"]],\"pigql\":\"q = load \\\"<ServiceCase>\\\"; curYear = filter q by date('CreatedDate__c_Year','CreatedDate__c_Month','CreatedDate__c_Day') in  {{no_quote(value(field(selection(Time_Selection), 'Current')))}}; comparePeriod = filter q by date('CreatedDate__c_Year','CreatedDate__c_Month','CreatedDate__c_Day') in {{no_quote(value(field(selection(Time_Selection), 'LastPeriodCompare')))}};  b = cogroup curYear by all, comparePeriod by all; b = foreach b generate (count(curYear) - count(comparePeriod))/count(comparePeriod) *100 as unique_Percent; \",\"autoFilter\":true}",
          "version": -1
        },
        "datasets": [
          {
            "name": "<ServiceCase>"
          }
        ]
      },
      "Open_Case_Count": {
        "isFacet": true,
        "isGlobal": false,
        "selectMode": "single",
        "type": "aggregate",
        "useGlobal": true,
        "visualizationParameters": {
          "visualizationType": "hbar"
        },
        "query": {
          "query": "{\"measures\":[[\"count\",\"*\"]],\"filters\":[[\"IsClosed\",[\"false\"],\"in\"]]}",
          "version": -1
        },
        "datasets": [
          {
            "name": "<ServiceCase>"
          }
        ]
      },
      "Compare_Backlog_in_Days": {
        "isFacet": true,
        "isGlobal": false,
        "selectMode": "single",
        "type": "aggregate",
        "useGlobal": true,
        "visualizationParameters": {
          "visualizationType": "hbar"
        },
        "query": {
          "query": "{\"measures\":[[\"unique\",\"Percent\"]],\"pigql\":\"q = load \\\"<ServiceCase>\\\"; totalBacklog = filter q by IsClosed == \\\"false\\\"; closedLast30Days = filter q by date('ClosedDate__c_Year','ClosedDate__c_Month','ClosedDate__c_Day') in [\\\"30 days ago\\\"..\\\"current day\\\"]; updcreatedTOTAL = filter q by date('CreatedDate__c_Year','CreatedDate__c_Month','CreatedDate__c_Day') in {{no_quote(value(field(selection(Time_Selection), 'BacklogCompare')))}};updclosedTOTAL = filter q by date('ClosedDate__c_Year','ClosedDate__c_Month','ClosedDate__c_Day') in {{no_quote(value(field(selection(Time_Selection), 'BacklogCompare')))}}; closedLast30DaysOldBacklog = filter q by date('ClosedDate__c_Year','ClosedDate__c_Month','ClosedDate__c_Day') in {{no_quote(value(field(selection(Time_Selection),'Backlog30DayClose')))}}; b = cogroup totalBacklog by all full, closedLast30Days by all full, updcreatedTOTAL by all full,updclosedTOTAL by all full, closedLast30DaysOldBacklog by all ; b = foreach b generate ((count(totalBacklog)/(count(closedLast30Days)/30))-((count(totalBacklog)+count(updclosedTOTAL)-count(updcreatedTOTAL))/(count(closedLast30DaysOldBacklog)/30)))/(((count(totalBacklog)+count(updclosedTOTAL)-count(updcreatedTOTAL)))/(count(closedLast30DaysOldBacklog)/30)) * 100 as 'unique_Percent';\",\"autoFilter\":true}",
          "version": -1
        },
        "datasets": [
          {
            "name": "<ServiceCase>"
          }
        ]
      },
      "Closed_Case_Count_this_week": {
        "isFacet": true,
        "isGlobal": false,
        "selectMode": "single",
        "type": "aggregate",
        "useGlobal": true,
        "visualizationParameters": {
          "visualizationType": "hbar"
        },
        "query": {
          "query": "{\"measures\":[[\"count\",\"*\"]],\"filters\":[[\"IsClosed\",[\"true\"],\"in\"],[\"ClosedDate__c\",[\"{{value(field(selection(Time_Selection), 'Compact'))}}\"]]]}",
          "version": -1
        },
        "datasets": [
          {
            "name": "<ServiceCase>"
          }
        ]
      },
      "Backlog_Trend_OverTime": {
        "isFacet": true,
        "isGlobal": false,
        "selectMode": "none",
        "type": "aggregate",
        "useGlobal": true,
        "visualizationParameters": {
          "visualizationType": "time"
        },
        "query": {
          "query": "{\"measures\":\"{{((field(selection(Time_Selection), 'Measure')))}}\",\"pigql\":\"q = load \\\"<ServiceCase>\\\"; created = filter q by date('CreatedDate__c_Year','CreatedDate__c_Month','CreatedDate__c_Day') in {{no_quote(value(field(selection(Time_Selection), 'Current')))}};; closed = filter q by date('ClosedDate__c_Year','ClosedDate__c_Month','ClosedDate__c_Day') in  {{no_quote(value(field(selection(Time_Selection), 'Current')))}}; current = filter q by 'IsClosed' == \\\"false\\\"; current = group current by all;current = foreach current generate \\\"Today\\\" as 'time',{{no_quote(value(field(selection(Time_Selection), 'trendProjection')))}} as {{single_quote(value(field(selection(Time_Selection), 'FullGroup')))}}, count() as backlog;diff = group created by ('CreatedDate__c_Year', {{no_quote(value(field(selection(Time_Selection), 'CreatedField')))}}) full, closed by ('ClosedDate__c_Year', {{no_quote(value(field(selection(Time_Selection), 'ClosedField')))}});diff = foreach diff generate \\\"Begining\\\" as 'time', {{no_quote(value(field(selection(Time_Selection), 'CreatedProjection')))}} as {{single_quote(value(field(selection(Time_Selection), 'FullGroup')))}}, count(closed) - count(created) as backlog;combined = union current, diff;combined = group combined by ({{single_quote(value(field(selection(Time_Selection), 'FullGroup')))}},'time');combined = foreach combined generate 'time' as 'time', {{single_quote(value(field(selection(Time_Selection), 'FullGroup')))}} as {{single_quote(value(field(selection(Time_Selection), 'FullGroup')))}}, sum(sum(backlog)) over([0 ..] partition by all order by ({{single_quote(value(field(selection(Time_Selection), 'FullGroup')))}})) as Backlog_Count; combined = filter combined by 'time' == \\\"Begining\\\";\",\"autoFilter\":true,\"groups\":[\"{{(value(field(selection(Time_Selection), 'compactGroup')))}}\"]}",
          "version": -1
        },
        "datasets": [
          {
            "name": "<ServiceCase>"
          }
        ]
      },
      "Cases_Open_vs_Cases_Closed": {
        "isFacet": true,
        "isGlobal": false,
        "selectMode": "none",
        "type": "aggregate",
        "useGlobal": true,
        "visualizationParameters": {
          "visualizationType": "vbar"
        },
        "query": {
          "query": "{\"measures\":[[\"count\",\"*\",null,{\"display\":\"Number of Cases\"}]],\"pigql\":\"q = load \\\"<ServiceCase>\\\";closed = filter q by date('ClosedDate__c_Year','ClosedDate__c_Month','ClosedDate__c_Day') in {{no_quote(value(field(selection(Time_Selection), 'Current')))}}; created = filter q by date('CreatedDate__c_Year','CreatedDate__c_Month','CreatedDate__c_Day') in {{no_quote(value(field(selection(Time_Selection), 'Current')))}};createdGroup = group created by {{no_quote(value(field(selection(Time_Selection), 'GroupbyCreatedDate__c')))}}; createdGroup = foreach createdGroup generate {{no_quote(value(field(selection(Time_Selection), 'GenerateCreatedDate__c')))}}, \\\"Created\\\" as 'Type', count() as count; closedGroup = group closed by {{no_quote(value(field(selection(Time_Selection), 'GroupbyClosedDate')))}}; closedGroup = foreach closedGroup generate {{no_quote(value(field(selection(Time_Selection), 'GenerateClosedDate')))}}, \\\"Closed\\\" as 'Type', count() as count; impact = cogroup created by {{no_quote(value(field(selection(Time_Selection), 'GroupbyCreatedDate__c')))}}, closed by {{no_quote(value(field(selection(Time_Selection), 'GroupbyClosedDate')))}}; impact = foreach impact generate {{no_quote(value(field(selection(Time_Selection), 'GenerateCoGroupDate')))}}, \\\"Backlog Impact\\\" as 'Type', count(created)-count(closed) as count;final = union closedGroup,createdGroup,impact; final = filter final by 'Type' in {{selection(Show_Close_Open_Details)}};  final = order final by {{single_quote(value(field(selection(Time_Selection), 'Grouping')))}}\",\"autoFilter\":true,\"groups\":[\"{{(value(field(selection(Time_Selection), 'Grouping')))}}\",\"Type\"]}",
          "version": -1
        },
        "datasets": [
          {
            "name": "<ServiceCase>"
          }
        ]
      }
    },
    "widgets": {
      "Waterfall_Backlog_Chart": {
        "type": "chart",
        "position": {
          "h": 340,
          "w": 490,
          "x": 280,
          "y": 400,
          "zIndex": 414
        },
        "parameters": {
          "showValues": true,
          "computeTotal": false,
          "legend": true,
          "step": "waterfall_chart",
          "exploreLink": false,
          "visualizationType": "stackwaterfall",
          "selectModeOverride": "none"
        }
      },
      "text_18": {
        "type": "text",
        "position": {
          "x": 270,
          "y": 360,
          "zIndex": 39
        },
        "parameters": {
          "fontSize": 16,
          "text": "Backlog Changes",
          "textAlignment": "left",
          "textColor": "rgb(64, 96, 127)"
        }
      },
      "text_17": {
        "type": "text",
        "position": {
          "x": 1120,
          "y": 160,
          "zIndex": 440
        },
        "parameters": {
          "fontSize": 14,
          "text": "Closed Cases",
          "textColor": "rgb(255, 255, 255)"
        }
      },
      "text_19": {
        "type": "text",
        "position": {
          "x": 800,
          "y": 360,
          "zIndex": 42
        },
        "parameters": {
          "fontSize": 16,
          "text": "Cases Over Time",
          "textAlignment": "left",
          "textColor": "rgb(64, 96, 127)"
        }
      },
      "text_14": {
        "type": "text",
        "position": {
          "x": 1050,
          "y": 250,
          "zIndex": 438
        },
        "parameters": {
          "fontSize": 11,
          "text": "VS LAST YEAR",
          "textColor": "rgba(255, 255, 255, 0.69)"
        }
      },
      "text_16": {
        "type": "text",
        "position": {
          "x": 1180,
          "y": 250,
          "zIndex": 439
        },
        "parameters": {
          "fontSize": 11,
          "text": "VS PRIOR PERIOD",
          "textColor": "rgba(255, 255, 255, 0.6)"
        }
      },
      "time_Cases_Open_vs_Cases_Closed": {
        "type": "chart",
        "position": {
          "h": 340,
          "w": 490,
          "x": 810,
          "y": 400,
          "zIndex": 43
        },
        "parameters": {
          "legend": true,
          "legendWidth": 80,
          "step": "Cases_Open_vs_Cases_Closed",
          "exploreLink": false,
          "visualizationType": "time",
          "selectModeOverride": "none"
        }
      },
      "text_10": {
        "type": "text",
        "position": {
          "x": 860,
          "y": 160,
          "zIndex": 434
        },
        "parameters": {
          "fontSize": 14,
          "text": "New Cases",
          "textColor": "rgb(255, 255, 255)"
        }
      },
      "link_back_to_overview": {
        "type": "link",
        "position": {
          "x": 30,
          "y": 20,
          "zIndex": 23
        },
        "parameters": {
          "destination": "<ServiceOverview>",
          "text": "Back to Overview",
          "textColor": "rgb(45, 147, 237)",
          "visualizationType": "hbar",
          "destinationType": "dashboard"
        }
      },
      "number_Compare_Backlog": {
        "type": "number",
        "position": {
          "w": 130,
          "x": 400,
          "y": 270,
          "zIndex": 37
        },
        "parameters": {
          "exploreLink": false,
          "fontSize": 16,
          "measureField": "unique_Percent",
          "step": "Compare_Backlog",
          "textAlignment": "center",
          "textColor": "rgb(255, 255, 255)",
          "title": ""
        }
      },
      "text_12": {
        "type": "text",
        "position": {
          "x": 920,
          "y": 250,
          "zIndex": 436
        },
        "parameters": {
          "fontSize": 11,
          "text": "VS PRIOR PERIOD",
          "textColor": "rgba(255, 255, 255, 0.7)"
        }
      },
      "text_11": {
        "type": "text",
        "position": {
          "x": 790,
          "y": 250,
          "zIndex": 435
        },
        "parameters": {
          "fontSize": 11,
          "text": "VS LAST YEAR",
          "textColor": "rgba(255, 255, 255, 0.67)"
        }
      },
      "number_days_to_close": {
        "type": "number",
        "position": {
          "w": 260,
          "x": 530,
          "y": 190,
          "zIndex": 445
        },
        "parameters": {
          "compact": true,
          "exploreLink": false,
          "fontSize": 32,
          "measureField": "tot_backlogdays",
          "step": "days_to_close",
          "textAlignment": "center",
          "textColor": "rgb(255, 255, 255)",
          "title": ""
        }
      },
      "box_19": {
        "type": "box",
        "position": {
          "h": 340,
          "w": 510,
          "x": 800,
          "y": 780,
          "zIndex": 46
        },
        "parameters": {
          "backgroundColor": "rgb(255, 255, 255)",
          "borderColor": "rgb(176, 195, 212)"
        }
      },
      "box_18": {
        "type": "box",
        "position": {
          "h": 340,
          "w": 510,
          "x": 270,
          "y": 780,
          "zIndex": 44
        },
        "parameters": {
          "backgroundColor": "rgb(255, 255, 255)",
          "borderColor": "rgb(176, 195, 212)"
        }
      },
      "box_15": {
        "type": "box",
        "position": {
          "h": 400,
          "w": 510,
          "x": 800,
          "y": 350,
          "zIndex": 40
        },
        "parameters": {
          "backgroundColor": "rgb(255, 255, 255)",
          "borderColor": "rgb(176, 195, 212)"
        }
      },
      "box_14": {
        "type": "box",
        "position": {
          "h": 400,
          "w": 510,
          "x": 270,
          "y": 350,
          "zIndex": 38
        },
        "parameters": {
          "backgroundColor": "rgb(255, 255, 255)",
          "borderColor": "rgb(176, 195, 212)"
        }
      },
      "text_3": {
        "type": "text",
        "position": {
          "x": 400,
          "y": 250,
          "zIndex": 429
        },
        "parameters": {
          "fontSize": 11,
          "text": "VS PRIOR PERIOD",
          "textColor": "rgba(255, 255, 255, 0.65)"
        }
      },
      "box_13": {
        "type": "box",
        "position": {
          "h": 40,
          "w": 130,
          "x": 20,
          "y": 48,
          "zIndex": 24
        },
        "parameters": {
          "backgroundColor": "rgb(232, 238, 244)",
          "borderColor": "rgb(232, 238, 244)"
        }
      },
      "list_filter_Support_level": {
        "type": "listselector",
        "position": {
          "h": 50,
          "w": 170,
          "x": 50,
          "y": 150,
          "zIndex": 100004
        },
        "parameters": {
          "expanded": false,
          "instant": false,
          "measureField": "count",
          "step": "filter_Support_level",
          "selectModeOverride": "multi"
        }
      },
      "text_2": {
        "type": "text",
        "position": {
          "x": 270,
          "y": 250,
          "zIndex": 421
        },
        "parameters": {
          "fontSize": 11,
          "text": "VS LAST YEAR",
          "textColor": "rgba(255, 255, 255, 0.62)"
        }
      },
      "text_5": {
        "type": "text",
        "position": {
          "x": 530,
          "y": 250,
          "zIndex": 446
        },
        "parameters": {
          "fontSize": 11,
          "text": "VS LAST YEAR",
          "textColor": "rgba(255, 255, 255, 0.65)"
        }
      },
      "box_11": {
        "type": "box",
        "position": {
          "h": 180,
          "w": 260,
          "x": 1050,
          "y": 140,
          "zIndex": 28
        },
        "parameters": {
          "backgroundColor": "rgb(32, 44, 88)",
          "borderColor": "rgba(176, 195, 212, 0.5)"
        }
      },
      "box_10": {
        "type": "box",
        "position": {
          "h": 180,
          "w": 260,
          "x": 790,
          "y": 140,
          "zIndex": 21
        },
        "parameters": {
          "backgroundColor": "rgb(32, 44, 88)",
          "borderColor": "rgba(176, 195, 212, 0.5)"
        }
      },
      "text_7": {
        "type": "text",
        "position": {
          "x": 660,
          "y": 250,
          "zIndex": 447
        },
        "parameters": {
          "fontSize": 11,
          "text": "VS PRIOR PERIOD",
          "textColor": "rgba(255, 255, 255, 0.71)"
        }
      },
      "text_8": {
        "type": "text",
        "position": {
          "x": 540,
          "y": 160,
          "zIndex": 444
        },
        "parameters": {
          "fontSize": 14,
          "text": "Projected Days to Clear Backlog",
          "textColor": "rgb(255, 255, 255)"
        }
      },
      "list_filter_product": {
        "type": "listselector",
        "position": {
          "h": 50,
          "w": 170,
          "x": 50,
          "y": 220,
          "zIndex": 100005
        },
        "parameters": {
          "expanded": false,
          "instant": false,
          "measureField": "count",
          "step": "filter_product",
          "selectModeOverride": "multi"
        }
      },
      "number_compare_created_Last_Year": {
        "type": "number",
        "position": {
          "w": 130,
          "x": 790,
          "y": 270,
          "zIndex": 461
        },
        "parameters": {
          "exploreLink": false,
          "fontSize": 16,
          "measureField": "unique_Percent",
          "step": "compare_created_Last_Year",
          "textAlignment": "center",
          "textColor": "rgb(255, 255, 255)",
          "title": ""
        }
      },
      "box_1": {
        "type": "box",
        "position": {
          "h": 1590,
          "w": 1360,
          "x": 0,
          "y": 0,
          "zIndex": 1
        },
        "parameters": {
          "backgroundColor": "rgb(232, 238, 244)",
          "borderColor": "rgba(146, 103, 194, 0)"
        }
      },
      "number_Open_Case_Count": {
        "type": "number",
        "position": {
          "w": 260,
          "x": 270,
          "y": 190,
          "zIndex": 37
        },
        "parameters": {
          "fontSize": 32,
          "measureField": "count",
          "step": "Open_Case_Count",
          "textAlignment": "center",
          "textColor": "rgb(255, 255, 255)",
          "title": ""
        }
      },
      "box_3": {
        "type": "box",
        "position": {
          "h": 30,
          "w": 130,
          "x": 20,
          "y": -10,
          "zIndex": 415
        },
        "parameters": {
          "backgroundColor": "rgb(232, 238, 244)",
          "borderColor": "rgb(232, 238, 244)"
        }
      },
      "RecordTypeFilter": {
        "type": "listselector",
        "position": {
          "h": 50,
          "w": 170,
          "x": 50,
          "y": 360,
          "zIndex": 100007
        },
        "parameters": {
          "expanded": false,
          "instant": false,
          "measureField": "count",
          "step": "filter_recordtype",
          "selectModeOverride": "multi"
        }
      },
      "number_compare_backlog_Last_Year": {
        "type": "number",
        "position": {
          "w": 130,
          "x": 270,
          "y": 270,
          "zIndex": 431
        },
        "parameters": {
          "exploreLink": false,
          "fontSize": 16,
          "measureField": "unique_Percent",
          "step": "compare_backlog_Last_Year",
          "textAlignment": "center",
          "textColor": "rgb(255, 255, 255)",
          "title": ""
        }
      },
      "number_compare_backlogDays_Last_Year": {
        "type": "number",
        "position": {
          "w": 130,
          "x": 530,
          "y": 270,
          "zIndex": 448
        },
        "parameters": {
          "compact": true,
          "exploreLink": false,
          "fontSize": 16,
          "measureField": "unique_Percent",
          "step": "compare_backlogDays_Last_Year",
          "textAlignment": "center",
          "textColor": "rgb(255, 255, 255)",
          "title": ""
        }
      },
      "list_Waterfall_Group_Select": {
        "type": "listselector",
        "position": {
          "h": 50,
          "w": 130,
          "x": 630,
          "y": 350,
          "zIndex": 100001
        },
        "parameters": {
          "expanded": false,
          "exploreLink": false,
          "measureField": "",
          "step": "Waterfall_Group_Select",
          "selectModeOverride": "singlerequired"
        }
      },
      "box_purple": {
        "type": "box",
        "position": {
          "h": 180,
          "w": 260,
          "x": 270,
          "y": 140,
          "zIndex": 34
        },
        "parameters": {
          "backgroundColor": "rgb(32, 44, 88)",
          "borderColor": "rgba(176, 195, 212, 0.5)"
        }
      },
      "box_20": {
        "type": "box",
        "position": {
          "h": 370,
          "w": 1040,
          "x": 270,
          "y": 1150,
          "zIndex": 48
        },
        "parameters": {
          "backgroundColor": "rgb(255, 255, 255)",
          "borderColor": "rgb(176, 195, 212)"
        }
      },
      "number_Closed_Case_Count_this_week": {
        "type": "number",
        "position": {
          "w": 260,
          "x": 1050,
          "y": 190,
          "zIndex": 35
        },
        "parameters": {
          "fontSize": 32,
          "measureField": "count",
          "step": "Closed_Case_Count_this_week",
          "textAlignment": "center",
          "textColor": "rgb(255, 255, 255)",
          "title": ""
        }
      },
      "time_Backlog_Trend_OverTime": {
        "type": "chart",
        "position": {
          "h": 320,
          "w": 1030,
          "x": 280,
          "y": 1190,
          "zIndex": 50
        },
        "parameters": {
          "legendWidth": 295,
          "step": "Backlog_Trend_OverTime",
          "exploreLink": false,
          "visualizationType": "time",
          "selectModeOverride": "none"
        }
      },
      "headerFlash2": {
        "type": "box",
        "position": {
          "h": 50,
          "w": 1280,
          "x": 40,
          "y": 97,
          "zIndex": 4
        },
        "parameters": {
          "backgroundColor": "rgb(232, 238, 244)",
          "borderColor": "rgb(232, 238, 244)"
        }
      },
      "text_31": {
        "type": "text",
        "position": {
          "x": 1039,
          "y": 110,
          "zIndex": 54
        },
        "parameters": {
          "fontSize": 12,
          "text": "Prior Period is based on the selected Date Range",
          "textColor": "rgba(0, 0, 0, 0.41)"
        }
      },
      "autocenter.autocenter.bgcolor=#CAD4DE": {
        "type": "box",
        "position": {
          "h": 20,
          "w": 20,
          "x": 1330,
          "y": 1560,
          "zIndex": -100
        },
        "parameters": {
          "backgroundColor": "rgb(232, 238, 244)",
          "borderColor": "rgb(232, 238, 244)"
        }
      },
      "number_Compare_Case_Closed": {
        "type": "number",
        "position": {
          "w": 130,
          "x": 1180,
          "y": 270,
          "zIndex": 36
        },
        "parameters": {
          "exploreLink": false,
          "fontSize": 16,
          "measureField": "unique_Percent",
          "step": "Compare_Case_Closed",
          "textAlignment": "center",
          "textColor": "rgb(255, 255, 255)",
          "title": ""
        }
      },
      "text_30": {
        "type": "text",
        "position": {
          "x": 340,
          "y": 160,
          "zIndex": 38
        },
        "parameters": {
          "fontSize": 14,
          "text": "Backlog",
          "textColor": "rgb(255, 255, 255)"
        }
      },
      "headerFlash": {
        "type": "box",
        "position": {
          "h": 50,
          "w": 1260,
          "x": 50,
          "y": 95,
          "zIndex": 2
        },
        "parameters": {
          "backgroundColor": "rgb(167, 123, 202)",
          "borderColor": "rgb(167, 123, 202)"
        }
      },
      "box_5": {
        "type": "box",
        "position": {
          "h": 30,
          "w": 30,
          "x": 10,
          "y": 20,
          "zIndex": 417
        },
        "parameters": {
          "backgroundColor": "rgb(232, 238, 244)",
          "borderColor": "rgb(232, 238, 244)"
        }
      },
      "box_4": {
        "type": "box",
        "position": {
          "h": 30,
          "w": 130,
          "x": 150,
          "y": 20,
          "zIndex": 416
        },
        "parameters": {
          "backgroundColor": "rgb(232, 238, 244)",
          "borderColor": "rgb(232, 238, 244)"
        }
      },
      "box_7": {
        "type": "box",
        "position": {
          "h": 180,
          "w": 260,
          "x": 530,
          "y": 140,
          "zIndex": 443
        },
        "parameters": {
          "backgroundColor": "rgb(32, 44, 88)",
          "borderColor": "rgba(176, 195, 212, 0.5)"
        }
      },
      "text_25": {
        "type": "text",
        "position": {
          "x": 270,
          "y": 1480,
          "zIndex": 451
        },
        "parameters": {
          "fontSize": 12,
          "text": "Backlog Trend does not take into account cases that have been re-opened",
          "textColor": "rgba(0, 0, 0, 0.41)"
        }
      },
      "list_filter_type": {
        "type": "listselector",
        "position": {
          "h": 50,
          "w": 170,
          "x": 50,
          "y": 290,
          "zIndex": 100006
        },
        "parameters": {
          "expanded": false,
          "instant": false,
          "measureField": "count",
          "step": "filter_type",
          "selectModeOverride": "multi"
        }
      },
      "text_27": {
        "type": "text",
        "position": {
          "x": 30,
          "y": 40,
          "zIndex": 418
        },
        "parameters": {
          "fontSize": 24,
          "text": "Backlog Analysis",
          "textAlignment": "left",
          "textColor": "rgb(41, 71, 102)"
        }
      },
      "number_Compare_Backlog_in_Days": {
        "type": "number",
        "position": {
          "w": 130,
          "x": 660,
          "y": 270,
          "zIndex": 449
        },
        "parameters": {
          "exploreLink": false,
          "fontSize": 16,
          "measureField": "unique_Percent",
          "step": "Compare_Backlog_in_Days",
          "textAlignment": "center",
          "textColor": "rgb(255, 255, 255)",
          "title": ""
        }
      },
      "text_21": {
        "type": "text",
        "position": {
          "x": 800,
          "y": 790,
          "zIndex": 46
        },
        "parameters": {
          "fontSize": 16,
          "text": "% Change of This Year vs Last Year",
          "textAlignment": "left",
          "textColor": "rgb(64, 96, 127)"
        }
      },
      "text_20": {
        "type": "text",
        "position": {
          "x": 270,
          "y": 790,
          "zIndex": 442
        },
        "parameters": {
          "fontSize": 16,
          "text": "Cases Created  This Year vs Last Year",
          "textAlignment": "left",
          "textColor": "rgb(64, 96, 127)"
        }
      },
      "text_22": {
        "type": "text",
        "position": {
          "x": 270,
          "y": 1160,
          "zIndex": 49
        },
        "parameters": {
          "fontSize": 16,
          "text": "Backlog Trend",
          "textAlignment": "left",
          "textColor": "rgb(64, 96, 127)"
        }
      },
      "time_Created_Cases_Over_Time": {
        "type": "chart",
        "position": {
          "h": 290,
          "w": 490,
          "x": 280,
          "y": 820,
          "zIndex": 46
        },
        "parameters": {
          "legend": true,
          "legendWidth": 85,
          "step": "Created_Cases_Over_Time",
          "exploreLink": false,
          "visualizationType": "time",
          "selectModeOverride": "none"
        }
      },
      "number_new_case_count_this_week": {
        "type": "number",
        "position": {
          "w": 260,
          "x": 790,
          "y": 190,
          "zIndex": 462
        },
        "parameters": {
          "fontSize": 32,
          "measureField": "count",
          "step": "new_case_count_this_week",
          "textAlignment": "center",
          "textColor": "rgb(255, 255, 255)",
          "title": ""
        }
      },
      "number_Compare_Case_Created": {
        "type": "number",
        "position": {
          "w": 130,
          "x": 920,
          "y": 270,
          "zIndex": 438
        },
        "parameters": {
          "exploreLink": false,
          "fontSize": 16,
          "measureField": "unique_Percent",
          "step": "Compare_Case_Created",
          "textAlignment": "center",
          "textColor": "rgb(255, 255, 255)",
          "title": ""
        }
      },
      "timeselect_Time_Selection": {
        "type": "listselector",
        "position": {
          "h": 50,
          "w": 170,
          "x": 1140,
          "y": 30,
          "zIndex": 100008
        },
        "parameters": {
          "expanded": false,
          "exploreLink": false,
          "measureField": "",
          "step": "Time_Selection",
          "title": "Date Range",
          "selectModeOverride": "singlerequired"
        }
      },
      "time_Average_Duration_Over_Time": {
        "type": "chart",
        "position": {
          "h": 290,
          "w": 490,
          "x": 810,
          "y": 820,
          "zIndex": 47
        },
        "parameters": {
          "step": "Average_Duration_Over_Time",
          "exploreLink": false,
          "visualizationType": "time",
          "selectModeOverride": "none"
        }
      },
      "number_compare_closed_Last_Year": {
        "type": "number",
        "position": {
          "w": 130,
          "x": 1050,
          "y": 270,
          "zIndex": 32
        },
        "parameters": {
          "exploreLink": false,
          "fontSize": 16,
          "measureField": "unique_Percent",
          "step": "compare_closed_Last_Year",
          "textAlignment": "center",
          "textColor": "rgb(255, 255, 255)",
          "title": ""
        }
      }
    }
  }
}
